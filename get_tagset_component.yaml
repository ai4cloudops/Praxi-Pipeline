name: Get tags
inputs:
- {name: user_in}
outputs:
- {name: train_tags, type: String}
- {name: test_tags, type: String}
- {name: output_args, type: String}
implementation:
  container:
    image: lkorver/praxi-columbus-base:0.072
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef get_tags(user_in, train_tags_path, test_tags_path, output_args_path):\n\
      \    import tagset_gen\n    import yaml\n    from yaml import Loader\n    import\
      \ os\n    import json\n    import pickle\n    #print(os.listdir('/pipelines/component/src/mix_test_tag'))\n\
      \    train_tags = []\n    print(os.listdir('/pipelines/component/src/demo_tagsets/mix_train_tag'))\n\
      \    for tag_file in os.listdir('/pipelines/component/src/demo_tagsets/mix_train_tag'):\n\
      \        if(tag_file[-3:] == 'tag'):\n            with open('/pipelines/component/src/demo_tagsets/mix_train_tag/'\
      \ + tag_file, 'rb') as tf:\n                tag = yaml.load(tf, Loader = Loader)\
      \    \n                train_tags.append(tag)\n                # with open(train_tags_path,\
      \ 'w') as tr_tags:\n                #     tr_tags.write(json.dumps(tag) + '\\\
      n')\n\n    with open(train_tags_path, 'wb') as writer:\n        pickle.dump(train_tags,\
      \ writer)\n    print(len(train_tags))\n    test_tags = []\n    for tag_file\
      \ in os.listdir('/pipelines/component/src/demo_tagsets/mix_test_tag'):\n   \
      \     if(tag_file[-3:] == 'tag'):\n            with open('/pipelines/component/src/demo_tagsets/mix_test_tag/'\
      \ + tag_file, 'rb') as tf:\n                tag = yaml.load(tf, Loader = Loader)\
      \    \n                test_tags.append(tag)\n                # with open(test_tags_path,\
      \ 'w') as ts_tags:\n                #     ts_tags.write(json.dumps(tag) + '\\\
      n')\n    with open(test_tags_path, 'wb') as writer:\n        pickle.dump(test_tags,\
      \ writer)\n    print(len(test_tags))\n\n    with open(output_args_path, 'wb')\
      \ as argf:\n        pickle.dump(\"multilabel\", argf)\n\nimport argparse\n_parser\
      \ = argparse.ArgumentParser(prog='Get tags', description='')\n_parser.add_argument(\"\
      --user-in\", dest=\"user_in\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--train-tags\", dest=\"train_tags_path\", type=_make_parent_dirs_and_return_path,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--test-tags\"\
      , dest=\"test_tags_path\", type=_make_parent_dirs_and_return_path, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-args\", dest=\"\
      output_args_path\", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n\
      _parsed_args = vars(_parser.parse_args())\n\n_outputs = get_tags(**_parsed_args)\n"
    args:
    - --user-in
    - {inputValue: user_in}
    - --train-tags
    - {outputPath: train_tags}
    - --test-tags
    - {outputPath: test_tags}
    - --output-args
    - {outputPath: output_args}
