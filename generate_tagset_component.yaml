name: Generate tagset
description: generate tagset from the changeset
inputs:
- {name: input_args, type: String}
- {name: changeset, type: String}
outputs:
- {name: output_text, type: String}
- {name: output_args, type: String}
implementation:
  container:
    image: lkorver/praxi-columbus-base:0.067
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def generate_tagset(input_args_path, changeset_path, output_text_path, output_args_path):
          '''generate tagset from the changeset'''
          import tagset_gen
          import json
          import pickle
          import os
          from function import changeset_gen
          change_dir = changeset_path
          tag_dict_gen = tagset_gen.run(change_dir)

          with open(input_args_path, 'rb') as in_argfile:
              user_in = pickle.load(in_argfile)

          with open(output_text_path, 'w') as writer:
               for tag_dict in tag_dict_gen:
                   writer.write(json.dumps(tag_dict) + '\n')

          with open(output_args_path, 'wb') as argfile:
              pickle.dump(user_in, argfile)

      import argparse
      _parser = argparse.ArgumentParser(prog='Generate tagset', description='generate tagset from the changeset')
      _parser.add_argument("--input-args", dest="input_args_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--changeset", dest="changeset_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-text", dest="output_text_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-args", dest="output_args_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = generate_tagset(**_parsed_args)
    args:
    - --input-args
    - {inputPath: input_args}
    - --changeset
    - {inputPath: changeset}
    - --output-text
    - {outputPath: output_text}
    - --output-args
    - {outputPath: output_args}
